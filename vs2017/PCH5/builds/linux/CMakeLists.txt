cmake_minimum_required(VERSION 3.0.0)

project (Linkdood)

string(TOLOWER ${CMAKE_HOST_SYSTEM_PROCESSOR} systemProcess)
message(${systemProcess})
if (${PLATFORM_INFO} STREQUAL fangde)
	set(LINUX_PACK_TYPE "deb")
	set(LINUX_PROCESS_LIBRARY_DIR "amd")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")
elseif(${PLATFORM_INFO} STREQUAL yinhe)
	set(LINUX_PACK_TYPE "deb")
	set(LINUX_PROCESS_LIBRARY_DIR "aarch64")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "arm64")
elseif(${PLATFORM_INFO} STREQUAL zhaoxin)
	set(LINUX_PACK_TYPE "rpm")
	set(LINUX_PROCESS_LIBRARY_DIR "x86_64")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "x86_64")
elseif(${PLATFORM_INFO} STREQUAL longxin)
	set(LINUX_PACK_TYPE "rpm")
	set(LINUX_PROCESS_LIBRARY_DIR "mips64")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "mips64el")
elseif(${PLATFORM_INFO} STREQUAL huawei)
	set(LINUX_PACK_TYPE "rpm")
	set(LINUX_PROCESS_LIBRARY_DIR "aarch64")
	set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "aarch64")
endif()

install(DIRECTORY ${CMAKE_SOURCE_DIR}/../../builds/linux/${PROJECT_NAME} DESTINATION /opt/ PATTERN * PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_WRITE GROUP_READ WORLD_READ WORLD_WRITE WORLD_EXECUTE)
if(${PLATFORM_INFO} STREQUAL zhaoxin OR ${PLATFORM_INFO} STREQUAL fangde)
	file(COPY ${CMAKE_SOURCE_DIR}/../../bin/linux-unpacked DESTINATION  ${CMAKE_SOURCE_DIR}/../../builds/linux )
	file(RENAME ${CMAKE_SOURCE_DIR}/../../builds/linux/linux-unpacked ${CMAKE_SOURCE_DIR}/../../builds/linux/${PROJECT_NAME})
else()
	file(COPY ${CMAKE_SOURCE_DIR}/../../bin/linux-${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}-unpacked DESTINATION  ${CMAKE_SOURCE_DIR}/../../builds/linux )
	file(RENAME ${CMAKE_SOURCE_DIR}/../../builds/linux/linux-${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}-unpacked ${CMAKE_SOURCE_DIR}/../../builds/linux/${PROJECT_NAME})
endif()	
install(FILES ${CMAKE_SOURCE_DIR}/../../builds/linux/Linkdood.desktop DESTINATION /usr/share/applications PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_WRITE GROUP_READ WORLD_READ WORLD_WRITE WORLD_EXECUTE)
#install(DIRECTORY ${CMAKE_SOURCE_DIR}/../../builds/linux/doc/${PRODUCT_NAME} DESTINATION /usr/share/doc)
if(${LINUX_PACK_TYPE} STREQUAL deb)
	set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_SOURCE_DIR}/postinst;${CMAKE_SOURCE_DIR}/postrm;${CMAKE_SOURCE_DIR}/preinst;${CMAKE_SOURCE_DIR}/prerm;")
elseif(${LINUX_PACK_TYPE} STREQUAL rpm)
	# 安装前和安装后执行的shell脚本, 会打包到RPM中，安装时执行。这里可扩展性很强, 放在源码目录下即可
	set(CPACK_RPM_PRE_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/preinst")
	set(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/prerm")
	set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/postinst")
	set(CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/postrm")
endif()	
#file(REMOVE_RECURSE ${CMAKE_SOURCE_DIR}/builds/linux/${PROJECT_NAME})


set(PACKGE_NAME "${PRODUCT_NAME}")
if(${LINUX_PACK_TYPE} STREQUAL deb)
	set(CPACK_DEBIAN_PACKAGE_NAME "${PACKGE_NAME}")
	set(CPACK_DEBIAN_PACKAGE_VERSION "${PRODUCT_VERSION}")
	set(CPACK_DEBIAN_PACKAGE_MAINTAINER "liuheng")
	set(CPACK_DEBIAN_PACKAGE_DESCRIPTION "This is a chat tool.")
	set(CPACK_GENERATOR DEB ${CPACK_GENERATOR})
	set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS OFF)
	set(CPACK_DEBIAN_PACKAGE_SECTION "Office")
	set(CPACK_DEBIAN_PACKAGE_HOMEPAGE "http://github.com/vrvim")
	set(CPACK_DEBIAN_COMPRESSION_TYPE "xz")
elseif(${LINUX_PACK_TYPE} STREQUAL rpm)
	# 以下为RPM信息的设置，包名,概述，供应者，版本, 分组等等信息，通过其变量名称可以知道意思
	set(CPACK_RPM_PACKAGE_NAME "${PACKGE_NAME}")
	set(CPACK_RPM_PACKAGE_VERSION "${PRODUCT_VERSION}")
	set(CPACK_RPM_PACKAGE_RELEASE "1")
	set(CPACK_RPM_PACKAGE_SUMMARY "This is a chat tool.")
	set(CPACK_RPM_PACKAGE_URL "http://github.com/vrvim")
	set(CPACK_RPM_PACKAGE_GROUP "Applications/Internet")
	set(CPACK_RPM_PACKAGE_LICENSE "GPL")
	set(CPACK_RPM_PACKAGE_ARCHITECTURE "${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
	# 设置默认生成器，RPM生成器会构建RPM安装包
	set(CPACK_GENERATOR RPM ${CPACK_GENERATOR})
	# 禁用自动生成依赖关系
	set(CPACK_RPM_PACKAGE_AUTOREQ 0)
	set(CPACK_RPM_COMPRESSION_TYPE "xz")

endif()
# Package builder
set(CPACK_PACKAGE_CONTACT "lh562531747@qq.com")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_NAME})
set(CPACK_PACKAGE_VENDOR "北京北信源软件股份有限公司")
set(CPACK_OUTPUT_FILE_PREFIX ${PRODUCT_PATH})
message("package path is:${PRODUCT_PATH}")
# Package version name
if(${LINUX_PACK_TYPE} STREQUAL deb)
	set(CPACK_PACKAGE_FILE_NAME "${PRODUCT_NAME}_${PRODUCT_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
elseif(${LINUX_PACK_TYPE} STREQUAL rpm)
	set(CPACK_PACKAGE_FILE_NAME "${PRODUCT_NAME}-${PRODUCT_VERSION}-${CPACK_RPM_PACKAGE_ARCHITECTURE}")
endif()
include(CPack)
